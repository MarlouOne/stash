import cv2
import numpy as np
##########################################################################################################################
#Чтение фото
# img = cv2.imread('Machine_vision\src\VKA_promo.png') # загружаем фото
# # img = cv2.GaussianBlur(img, (9,9), 8) # Размытие по Гауссу
# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Приводим картинку к Ч/Б варианту
# img = cv2.Canny(img, 150,150) # Находим контуры изображения. Параметры : исходное изображение, пароги 
# ## Изменение обводки
# kernel = np.ones((5,5), np.uint8) # Создаём матрицу границ
# # img = cv2.dilate(img, kernel, iterations=1) # Увеличиваем размер найденных ранее границ (контуров)

# # img  = cv2.erode(img, kernel, iterations=1) # Уменьшение размера найденных ранее границ (контуров)

# cv2.imshow('photo', img) # Показываем фото
# # cv2.imshow('photo', img[0:100, 0:1500]) # Показываем часть фото (левый верхний квадрат размером высота на ширина)
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################


##########################################################################################################################
# #Чтение видео
# video = cv2.VideoCapture('Machine_vision\src\Gorin_video.mp4') # Читаем видео
# while True: # Цикл показа видео "по кадрам"
#     success, frame = video.read() # Получаем статус чтения(Успешно/неуспешно) и текущий кадр
#     cv2.imshow('video', frame) # Показываем текущий кадр
    
#     if ord('q') == 0xFF & cv2.waitKey(1) : # Если нажата кнопка "q" и видео кончилось 
#         break # То закрываем окно с видео
##########################################################################################################################

##########################################################################################################################
# #Работа с веб-камерами 
# video = cv2.VideoCapture(*Номер веб-камеры*) # Читаем видео
# video.set(3, 500) # Устанавливаем ширину
# video.set(4, 300) # Устанавливаем высоту
##########################################################################################################################

##########################################################################################################################
# Изменение размеров картинки
# img = cv2.imread('Machine_vision\src\VKA_promo.png') # загружаем фото
# print(img.shape) # Выводим на экран размер картинки в виде кортежа {высота, ширина, количество слоёв}
# resized_img = cv2.resize(img, (1000, 100)) # Меняем размер фото с параметрами в виде кортежа (ширина, высота)

# cv2.imshow('photo', resized_img) # Показываем фото

# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################

##########################################################################################################################
# Создание собственных изображений
# Для создание изображений используется матрица
photo= np.zeros((300, 300, 3), dtype='uint8') # Создаём матрицу, которая является "холстом" размером ширина на высоту пикселей глубиной 3
# В OpenCV используется формат BGR
# photo[:] = 255, 0, 255 # Красим ВСЁ изображение (Синий ,зелёный, красный)
# photo[10:100, 10:100] = 0, 255, 255 # Красим С ОТСТУПАМИ изображение (Синий ,зелёный, красный)
## Рисуем квадрат
cv2.rectangle(photo, (0, 0), (100, 100), (200, 200,0), thickness=3) # Рисуем квадрат. Параметры : "холст", (отступ от левого верхнего края), (размер квадрата), (цвет обводки), толщена обводки. Параметр thickness=cv2.FILLED - фигура закрашена
## Рисуем линию
cv2.line(photo,(0, photo.shape[0]//2), (photo.shape[0], photo.shape[0]//2), (200, 200,200) )
## Рисуем круг
cv2.circle(photo, (photo.shape[0], photo.shape[0]//2), 100, (200, 200,200) )
## Выводим текст
# cv2.putText(photo, 'Marlou_One', (100, 100),)


cv2.imshow('photo', photo) # Показываем фото
cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################



##########################################################################################################################
# # Пример обработки видео
# video = cv2.VideoCapture('Machine_vision\src\Gorin_video.mp4') # Читаем видео
# while True: # Цикл показа видео "по кадрам"
#     success, img = video.read() # Получаем статус чтения(Успешно/неуспешно) и текущий кадр
    
    
#     # Обработка покадрово

#     # img = cv2.GaussianBlur(img, (9,9), 8) # Размытие по Гауссу
#     img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Приводим картинку к Ч/Б варианту
#     img = cv2.Canny(img, 25,25) # Находим контуры изображения. Параметры : исходное изображение, пароги 
#     ## Изменение обводки
#     kernel = np.ones((5,5), np.uint8) # Создаём матрицу границ
#     img = cv2.dilate(img, kernel, iterations=1) # Увеличиваем размер найденных ранее границ (контуров)

#     # img  = cv2.erode(img, kernel, iterations=1) # Уменьшение размера найденных ранее границ (контуров)

#     # cv2.imshow('photo', img[0:100, 0:1500]) # Показываем часть фото (левый верхний квадрат размером высота на ширина)
    
#     cv2.imshow('video', img) # Показываем текущий кадр
    
#     if ord('q') == 0xFF & cv2.waitKey(1) : # Если нажата кнопка "q" и видео кончилось 
#         break # То закрываем окно с видео
##########################################################################################################################

def rotate(img, angle):
    ##Функция вращения картинки на определённый угол
    height, width = img.shape[:2]
    point = (width//2, height//2)
    
    mat = cv2.getRotationMatrix2D(point, angle, 1)
    return cv2.warpAffine(img, mat, (width, height))

##########################################################################################################################
# #Вращение и отражение фото
# img = cv2.imread('Machine_vision\src\qg-MLG+.jpg') # загружаем фото
# img = cv2.flip(img, 1) # Отражение фотографии
# img = rotate(img, 30) # Вращение фото с использовнием рукописной функции rotate
# cv2.imshow('photo', img) # Показываем фото
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################

##########################################################################################################################
# # Работа с контурами
# img = cv2.imread('Machine_vision\src\qg-MLG+.jpg') # загружаем фото

# new_img = np.zeros(img.shape, dtype='uint8') # Создаём матрицу, которая является "холстом" размером "ширина на высоту"

# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Приводим изображение к серому формату
# img = cv2.GaussianBlur(img, (5,5), 0) # Размытие по Гауссу
# img = cv2.Canny(img, 100, 150) # Находим контуры изображения. Параметры : исходное изображение, пароги ( Диапазон яркости цвета пикселя)

# contours, hir = cv2.findContours(img, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE) # Находим контуры изображения

# cv2.drawContours(new_img, contours, -1, (200,200,0), 1)

# cv2.imshow('Photo', img) # Показываем фото
# cv2.imshow('Contours', new_img) # Показываем фото
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность

##########################################################################################################################

##########################################################################################################################
# # Преобразование в другие цветовые форматы
# img = cv2.imread('Machine_vision\src\qg-MLG+.jpg') # загружаем фото

# img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) # Меняем формат цветового отображения
# r, g, b = cv2.split(img) # Разбиваем цвета изображения на цветовые слои
# img = cv2.merge([r,g,b]) # Объединение цветовых слоёв

# cv2.imshow('Photo', img) # Показываем фото
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################

##########################################################################################################################
# # Побитовые операции - незакончено

# # img = cv2.imread('Machine_vision\src\qg-MLG+.jpg') # загружаем фото
# img= np.zeros((300, 300, 3), dtype='uint8') # Создаём матрицу, которая является "холстом" размером "ширина на высоту"
# circle = cv2.circle( img )

# cv2.imshow('Photo', img) # Показываем фото
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
##########################################################################################################################


# img = cv2.imread('Machine_vision\src\photo_2023-01-22_23-49-50.jpg') # загружаем фото

# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Меняем формат цветового отображения

# faces = cv2.CascadeClassifier('Machine_vision\Models\haarcascade_frontalface_alt.xml') #  Подгружаем модель

# results = faces.detectMultiScale(img, scaleFactor = 1.1, minNeighbors = 1) 

# for (x, y, w, h) in results:
#     cv2.rectangle(img, (x,y), (x + w, y + h), (200,200,0), thickness=3)

# cv2.imshow('Photo', img) # Показываем фото
# cv2.waitKey(0) # Сколько картинка будет открыта. 0 == бесконечность
